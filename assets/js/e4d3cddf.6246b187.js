"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[202],{6164:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(3289);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1759:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return p}});var a=n(1629),r=n(7322),o=(n(3289),n(6164)),i=["components"],s={id:"best-practices",title:"Best Practices",sidebar_label:"Best Practices"},c={unversionedId:"best-practices",id:"best-practices",isDocsHomePage:!1,title:"Best Practices",description:"Use Global state as a single source of truth",source:"@site/docs/best-practices.md",sourceDirName:".",slug:"/best-practices",permalink:"/engine/docs/best-practices",editUrl:"https://github.com/code11/engine/edit/master/docs/docs/best-practices.md",version:"current",sidebar_label:"Best Practices",frontMatter:{id:"best-practices",title:"Best Practices",sidebar_label:"Best Practices"},sidebar:"docs",previous:{title:"Packages",permalink:"/engine/docs/packages"},next:{title:"Debugging",permalink:"/engine/docs/guides/debugging"}},l=[{value:"Use Global state as a single source of truth",id:"use-global-state-as-a-single-source-of-truth",children:[]},{value:"Keep a normalized state",id:"keep-a-normalized-state",children:[]},{value:"Pass minimal data to children",id:"pass-minimal-data-to-children",children:[]},{value:"Component which needs the data, maintains the data",id:"component-which-needs-the-data-maintains-the-data",children:[]},{value:"Use Object to store domain objects instead of Array",id:"use-object-to-store-domain-objects-instead-of-array",children:[]},{value:"Prefer explicit types over boolean flags",id:"prefer-explicit-types-over-boolean-flags",children:[]}],d={toc:l};function p(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"use-global-state-as-a-single-source-of-truth"},"Use Global state as a single source of truth"),(0,o.kt)("p",null,"An instance of ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/engine"},"Engine")," can have a single\nglobal state, and it is recommended to use that as the single source of truth\nfor all the data required by all components of an application."),(0,o.kt)("h3",{id:"keep-a-normalized-state"},"Keep a normalized state"),(0,o.kt)("p",null,"Same data should not be kept in more than one paths in state."),(0,o.kt)("h3",{id:"pass-minimal-data-to-children"},"Pass minimal data to children"),(0,o.kt)("p",null,"Parent component should pass minimum amount of data to its children. Ideally, no\ndata should be passed to a component's children. Children are responsible for\nobserving the data they need from global state."),(0,o.kt)("h3",{id:"component-which-needs-the-data-maintains-the-data"},"Component which needs the data, maintains the data"),(0,o.kt)("p",null,"When different components need same data in different shapes, e.g ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoFooter"),"\nneeds a to show number of pending ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoItem"),"s, it is the responsibility of\n",(0,o.kt)("inlineCode",{parentName:"p"},"TodoFooter")," to have a producer which provides ",(0,o.kt)("inlineCode",{parentName:"p"},"pendingCount")," by counting\n",(0,o.kt)("inlineCode",{parentName:"p"},"TodoItem.status === 'pending'")," from state."),(0,o.kt)("h3",{id:"use-object-to-store-domain-objects-instead-of-array"},"Use Object to store domain objects instead of Array"),(0,o.kt)("p",null,"Domain objects are the critical business objects we have modeled to solve the\nbusiness problems with our software. It is recommended to keep domain objects in\n",(0,o.kt)("inlineCode",{parentName:"p"},"Object")," e.g ",(0,o.kt)("inlineCode",{parentName:"p"},"todosById: { [id: string]: TodoItem }"),"."),(0,o.kt)("p",null,"This is a good practice in general, and Engine provides nice optimizations for\nthis pattern. When a list of such objects is needed, a producer should be\ncreated to create and update a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"s."),(0,o.kt)("h3",{id:"prefer-explicit-types-over-boolean-flags"},"Prefer explicit types over boolean flags"),(0,o.kt)("p",null,"Instead of using boolean flags, e.g ",(0,o.kt)("inlineCode",{parentName:"p"},"isDone")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"isEditing"),", prefer using\nexplicit types, e.g"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'enum Statuses {\n  done: "done",\n  pending: "pending"\n}\n\nenum Modes {\n  viewing: "viewing",\n  editing: "editing"\n}\n')),(0,o.kt)("p",null,"When using an ",(0,o.kt)("inlineCode",{parentName:"p"},"Enum"),", prefer using a string Enum."))}p.isMDXComponent=!0}}]);