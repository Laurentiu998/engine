"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[202],{6164:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(3289);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4195:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return c}});var a=n(1629),i=n(7322),r=(n(3289),n(6164)),o=["components"],s={id:"best-practices",title:"Best Practices",sidebar_label:"Best Practices"},l={unversionedId:"best-practices",id:"best-practices",isDocsHomePage:!1,title:"Best Practices",description:"Use Global state as a single source of truth",source:"@site/docs/best-practices.md",sourceDirName:".",slug:"/best-practices",permalink:"/engine/docs/best-practices",editUrl:"https://github.com/code11/engine/edit/master/docs/docs/best-practices.md",version:"current",sidebar_label:"Best Practices",frontMatter:{id:"best-practices",title:"Best Practices",sidebar_label:"Best Practices"},sidebar:"docs",previous:{title:"Packages",permalink:"/engine/docs/packages"},next:{title:"Debugging",permalink:"/engine/docs/guides/debugging"}},p=[{value:"Use Global state as a single source of truth",id:"use-global-state-as-a-single-source-of-truth",children:[]},{value:"Keep a normalized state",id:"keep-a-normalized-state",children:[]},{value:"Pass minimal data to children",id:"pass-minimal-data-to-children",children:[]},{value:"Component which needs the data, maintains the data",id:"component-which-needs-the-data-maintains-the-data",children:[]},{value:"Use Object to store domain objects instead of Array",id:"use-object-to-store-domain-objects-instead-of-array",children:[]},{value:"Prefer explicit types for defining states",id:"prefer-explicit-types-for-defining-states",children:[]},{value:"Convention for naming variables:",id:"convention-for-naming-variables",children:[]},{value:"Producers:",id:"producers",children:[]},{value:"Components (views):",id:"components-views",children:[]}],d={toc:p};function c(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"use-global-state-as-a-single-source-of-truth"},"Use Global state as a single source of truth"),(0,r.kt)("p",null,"An instance of ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/engine"},"Engine")," can have a single\nglobal state, and it is recommended to use that as the single source of truth\nfor all the data required by all components of an application."),(0,r.kt)("h3",{id:"keep-a-normalized-state"},"Keep a normalized state"),(0,r.kt)("p",null,"Same data should not be kept in more than one paths in state."),(0,r.kt)("h3",{id:"pass-minimal-data-to-children"},"Pass minimal data to children"),(0,r.kt)("p",null,"Parent component should pass minimum amount of data to its children. Ideally, no\ndata should be passed to a component's children. Children are responsible for\nobserving the data they need from global state."),(0,r.kt)("h3",{id:"component-which-needs-the-data-maintains-the-data"},"Component which needs the data, maintains the data"),(0,r.kt)("p",null,"When different components need same data in different shapes, e.g ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoFooter"),"\nneeds a to show number of pending ",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItem"),"s, it is the responsibility of\n",(0,r.kt)("inlineCode",{parentName:"p"},"TodoFooter")," to have a producer which provides ",(0,r.kt)("inlineCode",{parentName:"p"},"pendingCount")," by counting\n",(0,r.kt)("inlineCode",{parentName:"p"},"TodoItem.status === 'pending'")," from state."),(0,r.kt)("h3",{id:"use-object-to-store-domain-objects-instead-of-array"},"Use Object to store domain objects instead of Array"),(0,r.kt)("p",null,"Domain objects are the critical business objects we have modeled to solve the\nbusiness problems with our software. It is recommended to keep domain objects in\n",(0,r.kt)("inlineCode",{parentName:"p"},"Object")," e.g ",(0,r.kt)("inlineCode",{parentName:"p"},"todosById: { [id: string]: TodoItem }"),"."),(0,r.kt)("p",null,"This is a good practice in general, and Engine provides nice optimizations for\nthis pattern. When a list of such objects is needed, a producer should be\ncreated to create and update a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"s."),(0,r.kt)("h3",{id:"prefer-explicit-types-for-defining-states"},"Prefer explicit types for defining states"),(0,r.kt)("p",null,"When using an ",(0,r.kt)("inlineCode",{parentName:"p"},"Enum"),", prefer using a string Enum."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'enum Statuses {\n  done: "done",\n  pending: "pending"\n}\n\nenum Modes {\n  viewing: "viewing",\n  editing: "editing"\n}\n')),(0,r.kt)("h3",{id:"convention-for-naming-variables"},"Convention for naming variables:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"observe"),": the final name in the path or an interpretation of that value:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"bam = observe.something.bam\ntitle = observe.article.title\nisFinished = observe.article.finishedWritingInArticle\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update"),": the prefix update + the final name in the path or an interpretation of that value:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"updateBam = update.something.bam\nupdateTitle = update.article.title\nupdateIsFinished = update.article.finishedWritingInArticle\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"get"),": the prefix get + the final name in the path or an interpretation of that value:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getBam = get.something.bam\ngetTitle = get.article.title\ngetIsFinished = get.article.finishedWritingInArticle\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_")," for pseudo-private props:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"_viewId\n_producerId\n_now\n")),(0,r.kt)("h3",{id:"producers"},"Producers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"only one producer per file"),(0,r.kt)("li",{parentName:"ul"},"they should have a descriptive name (camelCase) and the file should have the same name"),(0,r.kt)("li",{parentName:"ul"},"they should do only one thing"),(0,r.kt)("li",{parentName:"ul"},"they should use ",(0,r.kt)("inlineCode",{parentName:"li"},"get")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"observe")," if you don\u2019t need that value to retrigger the producer"),(0,r.kt)("li",{parentName:"ul"},"in the folder structure they should stay close to the components that use them. "),(0,r.kt)("li",{parentName:"ul"},"if there are more than one producer for a component the propper way of ",(0,r.kt)("strong",{parentName:"li"},"importing")," them should be to by creating an ",(0,r.kt)("inlineCode",{parentName:"li"},"index.js/ts")," file in the producers folder and export them all there and in the component write like this")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-import",metastring:'* as producers from "./producers";',"*":!0,as:!0,producers:!0,from:!0,'"./producers";':!0},"...\n<Component>.producers(producers); \n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"if you use typescript keep using the types throughout the entire producer (use type casting if needed)")),(0,r.kt)("h3",{id:"components-views"},"Components (views):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"if you do not interact with the state you don't need a view, use a regular component instead"),(0,r.kt)("li",{parentName:"ul"},"only one component per file"),(0,r.kt)("li",{parentName:"ul"},"they should have a descriptive name (PascalCase) and the file should have the same name"),(0,r.kt)("li",{parentName:"ul"},"they should do only one thing"),(0,r.kt)("li",{parentName:"ul"},"components' responsability is to be up to date so the there is no use of ",(0,r.kt)("inlineCode",{parentName:"li"},"get")," "),(0,r.kt)("li",{parentName:"ul"},"the use of layout components is highly encourage (cards, sidebars, navbars)"),(0,r.kt)("li",{parentName:"ul"},"don't pass down props that contain data that the child component could simply get from the state"),(0,r.kt)("li",{parentName:"ul"},"if they have sub-components they can be put in a ",(0,r.kt)("inlineCode",{parentName:"li"},"./component")," folder on the same level"),(0,r.kt)("li",{parentName:"ul"},"they should be used only for ",(0,r.kt)("strong",{parentName:"li"},"displaying")," data or as ",(0,r.kt)("strong",{parentName:"li"},"layout component")," so they shouldn't manipulate or process the data."),(0,r.kt)("li",{parentName:"ul"},"they can only change the state by:  ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"triggering a producer (they can even pass simple date to the producers)"),(0,r.kt)("li",{parentName:"ul"},"they can also change the state directly but the changed data should be at most on the same level in the state hierarchy as the component's data is (e.g. checkbox component)"))),(0,r.kt)("li",{parentName:"ul"},"they can have inline style (tailwind or styled-components) and if they use .css that file should be put in the same folder"),(0,r.kt)("li",{parentName:"ul"},"if a component is use in multiple places they should be put in a ",(0,r.kt)("inlineCode",{parentName:"li"},"generalComponents")," upper in the folder hierarchy")))}c.isMDXComponent=!0}}]);